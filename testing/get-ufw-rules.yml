---
- hosts: all
  become: true
  tasks:
    - name: Fetch IP data from URL
      uri:
        url: https://stats.osbornetech.support/ansible/ufw/ufw_rules.json
        method: GET
        return_content: yes
      register: ip_data
      ignore_errors: true
      check_mode: no

    - name: Debug ip_data content
      debug:
        var: ip_data.content
      when: ip_data.content is defined

    - name: Debug failed status
      debug:
        var: ip_data.failed
      when: ip_data.failed is defined

    - name: Debug msg status
      debug:
        var: ip_data.msg
      when: ip_data.msg is defined

    - name: Debug status code
      debug:
        var: ip_data.status
      when: ip_data.status is defined

    - name: Parse JSON data
      set_fact:
        ip_list: "{{ ip_data.content | from_json }}"
      when: ip_data.content is defined and ip_data.status == 200
      ignore_errors: true

    - name: Check if JSON parsing failed or URL fetch failed
      fail:
        msg: "Failed to parse JSON data or fetch URL. Check 'ip_data' for details."
      when: ip_list is undefined or ip_data.failed or ip_data.status != 200

    - name: Gather existing UFW rules
      shell: ufw status numbered
      register: current_ufw_rules
      changed_when: false

    - name: Debug raw UFW output
      debug:
        var: current_ufw_rules.stdout_lines

    - name: Extract rule details
      set_fact:
        ufw_rules_list: >-
          {% set rules = [] %}
          {% for line in current_ufw_rules.stdout_lines %}
            {% if line is match('^\\[\\s*\\d+\\]') %}
              {% set num = line.split('[')[1].split(']')[0]|trim %}
              {% set rest = line.split(']')[1]|trim %}
              {% set action_parts = rest.split() %}
              {% set action = action_parts[0] ~ " " ~ action_parts[1] %}
              {% set from = action_parts[2] %}
              {% if '#' in rest %}
                {% set comment = rest.split('#')[1]|trim %}
              {% else %}
                {% set comment = '' %}
              {% endif %}
              {% set rule = {'num': num, 'action': action, 'from': from, 'comment': comment} %}
              {{ rules.append(rule) or '' }}
            {% endif %}
          {% endfor %}
          {{ rules | to_json }}
      when: ip_list is defined

    - name: Debug skipped lines
      debug:
        msg: "Skipping line: {{ item }}"
      loop: "{{ current_ufw_rules.stdout_lines }}"
      when:
        - ip_list is defined
        - item.split() | length < 5

    - name: Debug parsed UFW rules
      debug:
        var: ufw_rules_list

    - name: Set facts for rules to be deleted
      set_fact:
        rules_to_delete: >-
          {% set delete_list = [] %}
          {% set allowed_ips = ip_list | map(attribute='port') | list %}
          {% for rule in ufw_rules_list %}
            {% if rule['from'] is defined and rule['from'] != 'Anywhere' and rule['from'] not in allowed_ips %}
              {{ delete_list.append(rule) }}
            {% endif %}
          {% endfor %}
          {% if delete_list is not iterable or delete_list | length == 0 %}
            []
          {% else %}
            {{ delete_list }}
          {% endif %}
      when: ip_list is defined

    - name: Debug rules to delete
      debug:
        var: rules_to_delete

    - name: Configure UFW rules
      block:
        - name: Add UFW rule
          ufw:
            rule: allow
            src: "{{ item.port }}"
            comment: "{{ item.comment | default('Managed by Ansible') }}"
          loop: "{{ ip_list }}"
          when:
            - not current_ufw_rules.stdout_lines | select('match', '.*' + item.port + '.*') | list

        - name: Remove outdated UFW rules
          ufw:
            rule: delete
            num: "{{ item.num }}"
            state: absent
          loop: "{{ rules_to_delete }}"
      when: ip_list is defined
